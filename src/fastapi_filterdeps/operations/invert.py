from typing import Optional, Callable

from fastapi import Depends
from sqlalchemy import ColumnElement, and_, not_
from sqlalchemy.orm import DeclarativeBase


from fastapi_filterdeps.core.base import SqlFilterCriteriaBase
from fastapi_filterdeps.core.combine import combine_filter_conditions


class InvertCriteria(SqlFilterCriteriaBase):
    """Negates the result of a nested filter criterion.

    This class wraps another filter criterion and applies a SQL `NOT` operation
    to its result. It is almost always used via the `~` (invert) operator for
    a more readable and Pythonic syntax.

    If the nested criterion generates multiple conditions, they are first combined
    with `AND`, and then the entire group is negated. The resulting logic is
    `NOT (condition_A AND condition_B AND ...)`.

    Note:
        Using the `~` operator negates the filter's logic but does not alter
        the description of the original query parameter in the OpenAPI
        documentation. It is highly recommended to clarify the inverted behavior
        in the FastAPI path operation's docstring for API consumers.

    Attributes:
        criteria (SqlFilterCriteriaBase): The filter criterion instance to be
            negated.

    Example:
        Define a filter to exclude posts with a specific status, e.g., 'ARCHIVED'. The recommended way is to use the `~` operator and expose only the combined filter::

            .. code-block:: python

                from fastapi_filterdeps.filtersets import FilterSet
                from fastapi_filterdeps.filters.column.enum import EnumCriteria
                from myapp.models import Post, PostStatus

                class PostFilterSet(FilterSet):
                    combined = ~EnumCriteria(
                        field="status",
                        alias="exclude_status",
                        enum_class=PostStatus,
                        description="Exclude posts with this status"
                    )
                    class Meta:
                        orm_model = Post

                # In your endpoint:
                # GET /posts?exclude_status=ARCHIVED
                # will return posts that do NOT have status ARCHIVED.
    """

    def __init__(self, criteria: SqlFilterCriteriaBase):
        """Initializes the InvertCriteria.

        Args:
            criteria (SqlFilterCriteriaBase): The filter criterion instance to
                be negated.
        """
        self.criteria = criteria

    def build_filter(self, orm_model: type[DeclarativeBase]) -> Callable:
        """Builds a FastAPI dependency that negates the nested filter.

        This method constructs a dependency that wraps the dependency of the
        nested criterion. When resolved, it applies a `NOT` condition to the
        filter(s) generated by the nested criterion.

        Args:
            orm_model (type[DeclarativeBase]): The SQLAlchemy model class that the
                filter will be applied to.

        Returns:
            Callable: A FastAPI dependency that returns the negated SQLAlchemy
                filter expression (`ColumnElement`) or `None` if the nested
                filter is not active.
        """
        nested_filter_func = self.criteria.build_filter(orm_model)

        def filter_dependency(
            nested_filters=Depends(nested_filter_func),
        ) -> Optional[ColumnElement]:
            """Applies the NOT operator to the collected filter conditions."""
            if nested_filters is None:
                return None

            combined = combine_filter_conditions(nested_filters)
            if not combined:
                return None

            # Combine multiple conditions with AND before negating the group.
            return not_(and_(*combined))

        return filter_dependency
